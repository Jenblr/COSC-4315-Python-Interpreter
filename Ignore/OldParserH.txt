/* PARSER.H = 
* Responsible for parsing the tokens generated by the Lexer into the Abstract Syntax Tree (AST)
* Defines interface for parser, including constructor, parsing functions, and private member variables
*/

#ifndef PARSER_H
#define PARSER_H

#include "Lexer.h"
#include "ASTNode.h"
#include <iostream>
#include <stdexcept> 

class Parser {
public:
    Parser(Lexer& lexer);
    std::unique_ptr<ASTNode> parse();

private:
    Lexer& lexer;
    std::vector<Token> tokens;
    size_t currentToken;

    // Member functions of Parser class
    std::unique_ptr<ASTNode> parseExpression();
    std::unique_ptr<ASTNode> parseTerm();
    std::unique_ptr<ASTNode> parseFactor();
    std::unique_ptr<StatementNode> parseStatement();
    std::unique_ptr<ASTNode> parseAssignment();

    // Helper function to throw parsing errors
    void throwError(const std::string& message);
};

#endif // PARSER_H
